# Generated by Django 5.2.3 on 2025-08-04 19:38

import django.core.validators
import django.db.models.deletion
import posts.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('posts', '0002_alter_post_price'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('comment_id', models.CharField(default=posts.models.generate_custom_id, editable=False, max_length=8, primary_key=True, serialize=False, unique=True)),
                ('content', models.TextField(help_text='Maximum 500 characters', validators=[django.core.validators.MaxLengthValidator(500)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='posts.postcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='posts.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post_comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('visit_id', models.CharField(default=posts.models.generate_custom_id, editable=False, max_length=8, primary_key=True, serialize=False, unique=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='posts.post')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post_views',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('comment_like_id', models.CharField(default=posts.models.generate_custom_id, editable=False, max_length=8, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_likes', to=settings.AUTH_USER_MODEL)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='posts.postcomment')),
            ],
            options={
                'db_table': 'comment_likes',
                'ordering': ['-created_at'],
                'unique_together': {('comment', 'user')},
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('like_id', models.CharField(default=posts.models.generate_custom_id, editable=False, max_length=8, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='posts.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post_likes',
                'ordering': ['-created_at'],
                'unique_together': {('post', 'user')},
            },
        ),
    ]
